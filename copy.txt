git reset --soft HEAD^

.btn {
    display: inline-block;
    padding: .8rem 3rem;
    border: .2rem solid gray;
    color: gray;
    cursor: pointer;
    font-size: 1.7rem;
    border-radius: 3rem;
    position: relative;
    overflow: hidden;
    z-index: 0;
    margin-top: 1rem;
    margin-bottom: 10px;
}

.btn::before{
    content: ' ';
    position: absolute;
    top: 0; right: 0;
    width: 0%;
    height: 100%;
    background: gray;
    transition: .3s linear;
    z-index: -1;
}

.btn:hover::before {
    width: 100%;
    left: 0;
}

.btn:hover{
    color: #fff;
}



<div class="splash">
        <h2 class="splash-item">First, we need to get a general look at Philly</h2>
        <h2 class="splash-item">Next, we can split Philly into sections.</h2>
        <h2 class="splash-item">Then, we can dive deeper</h2>
        <h2 class="splash-item">Get more data about each section</h2>
        <h2 class="splash-item">And get the real perspectives of "dangerous" or "safe"</h2>
</div>



<div class="dropdown">
                        <button class="dropbtn"><a href="where.html" style="color: white; border-bottom-width: 6px; border-bottom-style: solid; padding: 6px;" id="a">WHERE</a></button>
                        <div class="dropdown-content">
                          <a href="dive-north.html">Deep Dive - North Philly</a>
                          <a href="dive-south.html">Deep Dive - South Philly</a>
                          <a href="dive-west.html">Deep Dive - West Philly</a>
                        </div>
                      </div>



const observer1 = new IntersectionObserver((entries1) => {
    entries1.forEach((entry1) => {
        console.log(entry1)
        if (entry1.isIntersecting) {
            entry1.target.classList.add('fade-in-delay');
        }
    });
});

const hiddenElements1 = document.querySelectorAll('.gonorth-content');
hiddenElements1.forEach((el) => observer1.observe(el));




const ctx = document.querySelector('.line-chart2').getContext('2d');
const chart = new Chart(ctx, {
  type: 'line',
  data: {
    labels: ['White (Non-Hispanic)', 'Black (Non-Hispanic', 'Hispanic (Black or White)', 'Asian', 'Other/Unknown'],
    datasets: [{
      label: 'Race/Ethnicity',
      data: [1, 2, 3, 4, 5],
    }],
  },
  options: {
    indexAxis: 'y', 
    responsive: true,
    layout: {
        padding: {
            right: 30,
            left: 10,
            bottom: 40
        }
    }
  },

  data: {
    labels: ['Younger than 18', '18-30', '31-45', 'Older than 45', 'Unknown'],
    datasets: [{
      label: 'Age',
      data: [1, 2, 3, 4, 5],
    }],
  },
  options: {
    indexAxis: 'y', 
    responsive: true,
    layout: {
      padding: {
        right: 30,
        left: 10,
        bottom: 40
      }
    }
  }
});


[39.946527, -75.186157],
    [39.940856, -75.137245],
    [39.909567, -75.129490],
    [39.888700, -75.138438],
    [39.882292, -75.192837],
    [39.891446, -75.193315],
    [39.894467, -75.177567],
    [39.896114, -75.180311],
    [39.892636, -75.193673],
    [39.894833, -75.206915],
    [39.903436, -75.215265],
    [39.909842, -75.214788],
    [39.911031, -75.207392],
    [39.919770, -75.201904],
    [39.921863, -75.210599],
    [39.927657, -75.211904],
    [39.943836, -75.201718],
    [39.942215, -75.193262],
    [39.947116, -75.186467],
